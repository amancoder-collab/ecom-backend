// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SELLER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  UPI
  WALLET
  COD
}

model User {
  id          String    @id @default(cuid())
  firstName   String    @map("first_name")
  lastName    String?   @map("last_name")
  email       String    @unique
  phoneNumber String    @map("phone_number")
  password    String
  gender      Gender
  dateOfBirth DateTime  @map("date_of_birth")
  fcmToken    String?   @map("fcm_token")
  deletedAt   DateTime? @map("deleted_at")
  role        Role      @default(USER)
  isDeleted   Boolean   @default(false) @map("is_deleted")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  addresses   Address[]
  products    Product[]
  reviews     Review[]
  carts       Cart[]
  wishlists   Wishlist[]
  otps        Otp[]
  couponsUsBy CouponUsage[]
  Order       Order[]

  @@map("users")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  sku             String
  description     String
  quantity        Int
  priceWithoutTax Int
  weight          Float
  breadth         Float
  height          Float
  length          Float
  tax             Int
  discountedPrice Int      @map("descounted_price")
  specification   Json
  stock           Int
  sizes           String[]
  colors          String[]
  images          String[]
  isLive          Boolean  @default(true) @map("is_live")
  sellerId        String?  @map("user_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  seller User? @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  reviews   Review[]
  wishlists Wishlist[]
  CartItem  CartItem[]
  OrderItem OrderItem[]

  @@index([priceWithoutTax, name, discountedPrice])
  @@map("products")
}

model Address {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  email     String
  phone     String
  address   String
  address2  String? @map("address_2")
  city      String
  state     String
  country   String
  pincode   Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  billingCarts   Cart[]  @relation("BillingAddress")
  shippingCarts  Cart[]  @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  comments  String
  productId String   @map("product_id")
  userId    String   @map("user_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Cart {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  billingAddressId      String?  @map("billing_address_id")
  shippingAddressId     String?  @map("shipping_address_id")
  shippingCost          Int?     @map("shipping_cost")
  courierCompanyId      Int?     @map("courier_company_id")
  estimatedDeliveryDate String?  @map("estimated_delivery_date")
  subTotal              Int?     @map("sub_total")
  totalCost             Int?     @map("total_cost")
  codCharges            Int?     @map("cod_charges")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: Cascade)
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Cascade)

  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String   @map("cart_id")
  productId String   @map("product_id")
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, size, color])
  @@map("cart_items")
}

model Order {
  id                    String   @id @default(cuid())
  customOrderId         String   @unique @map("custom_order_id")
  shipRocketOrderId     String   @unique @map("ship_rocket_order_id")
  shipmentId            String   @unique @map("shipment_id")
  awbCode               String?  @map("awb_code")
  courierCompanyId      Int?     @map("courier_company_id")
  userId                String   @map("user_id")
  paymentId             String?  @unique @map("payment_id")
  billingAddressId      String   @map("billing_address_id")
  shippingAddressId     String   @map("shipping_address_id")
  orderDate             DateTime @map("order_date")
  estimatedDeliveryDate String   @map("estimated_delivery_date")
  actualDeliveryDate    String?  @map("actual_delivery_date")
  shippingCost          Int      @map("shipping_cost")
  codCharges            Int      @map("cod_charges")
  subTotal              Int      @map("sub_total")
  totalCost             Int      @map("total_cost")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment         Payment? @relation(fields: [paymentId], references: [id])
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: Cascade)
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  productId String   @map("product_id")
  orderId   String?  @map("order_id")
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId, size, color])
  @@map("order_items")
}

model Payment {
  id                String        @id @default(cuid())
  amount            Float
  currency          String
  paymentMethod     PaymentMethod @map("payment_method")
  paymentStatus     PaymentStatus @default(PENDING) @map("payment_status")
  razorpayOrderId   String?       @map("razorpay_order_id")
  razorpayPaymentId String?       @map("razorpay_payment_id")
  razorpaySignature String?       @map("razorpay_signature")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  order Order?

  @@map("payments")
}

model Wishlist {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  isAdded   Boolean  @default(false) @map("add_wish_list")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("wishlists")
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  otp       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("otps")
}

model Coupon {
  id                 String        @id @default(cuid())
  title              String        @map("coupon_title")
  discountPercentage Int           @map("discount_percentage")
  termsAndConditions String[]      @map("coupon_tnc")
  code               String        @unique @map("coupon_code")
  isUsed             Boolean       @default(false) @map("coupons_used")
  validFrom          DateTime      @map("valid_from")
  validTo            DateTime      @map("valid_to")
  maxUsageAmount     Int           @map("max_usage_amount")
  minPurchaseAmount  Int           @map("min_purchase_amount")
  usages             CouponUsage[]
  isActive           Boolean       @default(true) @map("is_active")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  @@index([code])
  @@map("coupons")
}

model CouponUsage {
  id        String   @id @default(cuid())
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  String   @map("coupons_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("coupons_us_by")
}

model Subscribe {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subscribe")
}

model ShipRocketToken {
  id        String   @id @default(cuid())
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("ship_rocket_token")
}
