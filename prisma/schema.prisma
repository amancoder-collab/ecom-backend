// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SELLER
}

// schema.prisma
model user {
  id            String    @id @default(uuid())
  first_name    String
  last_name     String?
  email         String    @unique
  phone_number  String
  password      String
  gender        String
  date_of_birth DateTime
  fcm_token     String?
  access_token  String?
  refresh_token String?
  deleted_at    DateTime?
  role          Role      @default(USER)
  is_deleted    Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  address     address[]
  products    products[]
  review      review[]
  cart        cart[]
  wishlist    wishlist[]
  otp         otp[]
  CouponsUsBy CouponsUsBy[]
}

model products {
  id                  String     @id @default(uuid())
  product_name        String
  product_description String
  quantities          Int
  price_without_gst   Int
  gst                 Int
  descounted_prices   Int
  specification       Json //specifications field include detailed attributes that describe the product in more depth. like fabric, material, care instructions, etc
  stock               Int
  size                String[]
  colors              String[]
  images              String[]
  is_live             Boolean    @default(true)
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  user                user?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id             String?
  review              review[]
  cart                cart[]
  wishlist            wishlist[]
  order               order[]
}

model address {
  id           String  @id @default(uuid())
  user         user?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      String?
  your_name    String
  house_number String
  street       String
  city         String
  state        String
  country      String
  pincode      String
  land_mark    String
  phone_number String
  company_name String?
  gst_number   String?
}

model review {
  id         String    @id @default(uuid())
  comments   String
  images     String[]
  rating     Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user       user?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product_id String?
  user_id    String?
}

model cart {
  id         String    @id @default(uuid())
  user       user?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id String?
  quantities Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model wishlist {
  id            String    @id @default(uuid())
  products      products? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    String?
  user          user?     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String?
  add_wish_list Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model otp {
  id         String   @id @default(uuid())
  email      String
  otp        String
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?
  created_at DateTime @default(now())
}

model coupons {
  id                  String        @id @default(uuid())
  coupon_title        String
  discount_percentage Int
  coupon_tnc          String[]
  coupon_code         String        @unique
  coupons_used        Boolean       @default(false)
  valid_from          DateTime
  valid_to            DateTime
  max_usage_amount    Int
  min_purchase_amount Int
  CouponsUsBy         CouponsUsBy[]
  is_active           Boolean       @default(true)
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
}

model CouponsUsBy {
  id         String   @id @default(uuid())
  coupons    coupons? @relation(fields: [coupons_id], references: [id])
  coupons_id String?
  user       user?    @relation(fields: [user_id], references: [id])
  user_id    String?
  created_at DateTime @default(now())
}

// ORDER schema is need to define again 

model order {
  id                      String      @id @default(uuid())
  products                products?   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id              String?
  order_number            String
  order_status            String
  tracking_id             String
  estimated_delivery_date String
  actual_delivery_date    String
  tracking_status         String
  gst_in                  String
  price_per_unit          String
  total_amount            String
  delivery_detail         String
  shipping_cost           String
  other_cost              String
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  orderItem               orderItem[]
}

model orderItem {
  id             String   @id @default(uuid())
  quantity       String
  total_amount   String
  price_per_unit String
  created_at     DateTime @default(now())
  order          order?   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id       String?
}
